// script.js
// Bulle "WOUF !" au survol des chiens
document.querySelectorAll('.side-image').forEach(img => {
  img.addEventListener('mouseenter', () => {
    let bubble = document.createElement('div');
    bubble.className = 'bulle-wouf';
    bubble.innerText = 'WOUF !';
    img.parentElement.appendChild(bubble);
    let rect = img.getBoundingClientRect();
    bubble.style.position = 'absolute';
    bubble.style.top = (img.offsetTop - 40) + 'px';
    bubble.style.left = (img.offsetLeft + img.offsetWidth / 2 - 30) + 'px';
    bubble.style.background = 'yellow';
    bubble.style.padding = '5px 10px';
    bubble.style.borderRadius = '10px';
    bubble.style.fontWeight = 'bold';
    bubble.style.animation = 'pop 0.5s';
    setTimeout(() => bubble.remove(), 1500);
  });
});

// Traces de pattes au clic
document.addEventListener('click', (e) => {
  const paw = document.createElement('img');
  paw.src = 'images/patteChien.png';
  paw.className = 'patteChien';
  paw.style.position = 'absolute';
  paw.style.left = `${e.pageX - 25}px`;
  paw.style.top = `${e.pageY - 25}px`;
  paw.style.width = '50px';
  paw.style.height = '50px';
  paw.style.pointerEvents = 'none';
  document.body.appendChild(paw);

  setTimeout(() => {
    paw.remove();
  }, 2000);
});


// Popup rigolo au clic sur T√©l√©charger
    document.getElementById('downloadBtn').addEventListener('click', (e) => {
      e.preventDefault();
      const popup = document.createElement('div');
      popup.innerText = 'Oh non ! Les Pitous sont en train de finir l\'application ! üê∂üõ†Ô∏è';
      popup.style.position = 'fixed';
      popup.style.top = '50%';
      popup.style.left = '50%';
      popup.style.transform = 'translate(-50%, -50%)';
      popup.style.background = '#fff8dc';
      popup.style.border = '3px solid #ff6600';
      popup.style.padding = '20px';
      popup.style.borderRadius = '20px';
      popup.style.fontSize = '1.2em';
      popup.style.fontWeight = 'bold';
      popup.style.boxShadow = '0 5px 15px rgba(0,0,0,0.3)';
      popup.style.zIndex = '2000';
      document.body.appendChild(popup);
      setTimeout(() => popup.remove(), 3000);
    });


    // === [AJOUT] Gestion de la modale "Serpent" ===

// Contexte : s'ex√©cute apr√®s que le DOM soit pr√™t.
// Si tu n'as pas d√©j√† un DOMContentLoaded, ajoute-le :
document.addEventListener('DOMContentLoaded', () => {
  const openBtn = document.getElementById('playSnake');
  const overlay = document.getElementById('snakeModal');
  const dialog  = overlay?.querySelector('.modal-dialog');
  const btnClose = document.getElementById('btnClose');
  const btnRestart = document.getElementById('btnRestart');
  const canvas = document.getElementById('snakeCanvas');

  // Garde pour focus trap
  let lastFocused = null;

  function openSnakeModal() {
    if (!overlay || !dialog) return;

    lastFocused = document.activeElement;

    overlay.classList.add('open');
    document.body.classList.add('modal-open');
    overlay.setAttribute('aria-hidden', 'false');

    // Focus dans la modale
    dialog.setAttribute('tabindex', '-1');
    dialog.focus();

    // [√âtape 3] Initialisation du jeu (placeholder)
    // -> On remplira ceci quand snakeGame.js aura sa classe SnakeGame.
    if (!window.snake) {
      const options = {
        gridSize: 20,
        initialSpeed: 8,
        speedStepEvery: 3,
        maxSpeed: 14,
        assetsPath: 'images/snake/', // <-- ajuste ce chemin selon l'endroit o√π sont tes PNG
        // (facultatif) scoreEl: document.getElementById('score'),
        // (facultatif) highScoreEl: document.getElementById('highScore'),
      };
      window.snake = new SnakeGame(canvas, options);
    }
    window.snake.start();

  }

  function closeSnakeModal() {
    if (!overlay || !dialog) return;

    overlay.classList.remove('open');
    document.body.classList.remove('modal-open');
    overlay.setAttribute('aria-hidden', 'true');

    // [√âtape 3] Pause/stop du jeu (placeholder)
    if (window.snake) window.snake.pause();

    // Rendre le focus √† l'√©l√©ment d√©clencheur
    if (lastFocused && typeof lastFocused.focus === 'function') {
      lastFocused.focus();
    }
  }

  // Ouverture par clic sur l'image/bouton
  openBtn?.addEventListener('click', openSnakeModal);

  // Fermeture par bouton X
  btnClose?.addEventListener('click', closeSnakeModal);

  // Fermeture par clic sur l'overlay (mais pas si on clique dans la bo√Æte)
  overlay?.addEventListener('click', (e) => {
    if (e.target === overlay) closeSnakeModal();
  });

  // ESC pour fermer
  document.addEventListener('keydown', (e) => {
    if (overlay?.classList.contains('open') && e.key === 'Escape') {
      e.preventDefault();
      closeSnakeModal();
    }
  });

  // Rejouer (pour l'instant, juste un feedback; on branchera √† l'√©tape 3)
  btnRestart?.addEventListener('click', () => {
    // [√âtape 3] Reset et start
    btnRestart?.addEventListener('click', () => {
      if (window.snake) { window.snake.reset(); window.snake.start(); }
    });
  });

  // Petite protection responsive : ajuster le canvas en CSS suffit (aspect-ratio).
  // √Ä l'√©tape 3, on g√©rera devicePixelRatio pour la nettet√© du rendu.
});
